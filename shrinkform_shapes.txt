Shrink-form shapes for AFK
==========================

System:
 o Base shape is a cube.
 o Within the cube, place some number of weighted points.  (Equivalent to terrain features).
 o Fit the faces of the cube with grids of vertices (easily triangulated), just like the terrain base tile.
 o (OpenCL) For each vertex, attract it towards each point.  The attraction amount is a function of the point's weight and of the distance from that point.  It should be set up so that:
   - A vertex directly over a point is attracted towards that point to the exclusion of everything else.
   - A vertex an entire cube's width (the distance of just one cube side) away from a point, or more, is not attracted to it at all.
   - The overall end location of each vertex shall be a thusly weighted average of the attraction towards each point.
 o (OpenCL) Render a surface for the cube faces, just the same way as I render the landscape surface.
 o (OpenGL) Draw the shape as 6 instances of the cube face geometry, deformed by textures produced by the above two OpenCL stages.
 o *It's okay for each "shape" to be several non-contiguous things!*

Composite Shapes:
 o Chain many cubes together in some randomly chosen arrangement.
 o Cull the faces that simply face onto a different cube.  <-- Or not?  Honestly?  I think not.
 o Apply the above cube algorithm to all the remaining faces.  Don't try to cross-link the weighted points.  There will now be random composite shapes with obvious joins.
 o As well as cubes of weighted points, make the 8 half-cubes that follow logically from the half-tile terrain paradigm.  Because of the upper limit on the attraction function, the joins should now go away.
 o Finesse: Axes and planes of symmetry.  (This requires playing with the arrangement of the vertices in the base faces, and with the RNG seeds.)

Shape Detail:
 o When zooming in to a shape, spawn a new collection of cubes `subdivisionFactor' smaller along each edge to the old collection.
 o Don't deform the geometry of the bigger cube faces.  Instead deform the geometry of the smaller cube faces, first by the bigger point-cubes, then by the smaller ones.  The points of the smaller cubes should have attraction factors and distances that are divided by `subdivisionFactor' compared to those of the bigger cube faces (which means that the possible factors at each scale goes from x to x/subdivisionFactor, of course, just like the terrain deformation).
 o With composite shapes and the placing of large shapes into more than one cube of the world grid, I'll be able to choose to subdivide some parts of an object into more than other parts quite easily.

Better Looking Objects:
 o What I have now might turn out to be random blobs, and not be very good (as opposed to the landscape, which IS pretty good)
 o Try these variants on the weighted points:
   - Weighted lines
   - Weighted planes
   - Repulsion not attraction (note this expands the potential range of the geometry, from (0,0,0)-(1,1,1) in subdivisionFactor, to (0,0,0)-(2,2,2) -- this is surely okay).

