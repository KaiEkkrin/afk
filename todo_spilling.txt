The Spilling Problem
--------------------

With a 3D DisplayedWorldCell cache with shared_ptr's for the vertex arrays, I can't evict the cache, because random choice of cells will never pick all the cells in a vertical stack (necessary to cause the shared_ptr to actually have no references any more and be deleted).  Also, it becomes very slow because I'm doing data structure work for individual pixels (I need to minimise the amount of computation done per pixel).

Here's the suggestion.
 - rename DisplayedWorldCell to LandscapeCell because, really. OK
 - make the LandscapeCell cache 2D, indexed by a Vec3<long long> (cell X, cell Z, cell scale -- y implicitly zero).  ("2DCell"?) <-- no no.  "Tile" :) OK
 - make a geometry shader that scans through the triangles, and picks out only the ones that are within the selected y-axis boundaries.  This is how I will draw only the triangles in a particular WorldCell and not the ones in lower ones. OK
 - remove all y-height awareness, spilling logic from the LandscapeCell vertex stuff.  DO NOT MAKE ANY LISTS WHILE PROCESSING PIXELS.  Instead save out simple lower and upper bounds for the vertices in that cell.
 - make a new DisplayedLandscapeCell object that is drawing only, and that gets the GL buffers from a LandscapeCell, plus a pair of y-axis boundary parameters to give to the geometry shader. OK
 - move the terrain into the LandscapeCell, so that I'm not filling other WorldCells with empty fields.  (Yes, this will make WorldCell look a bit empty, but it still has the detection logic, and it will get the object list soon.) OK
 - in the generating worker, the natural mapping of Cell to 2DCell associates a WorldCell with the LandscapeCell that is at y=0 but that is at the correct LoD for the area of landscape within the WorldCell as seen by the camera.  Queue the LandscapeCell for processing if it isn't there already (as normal).  Compare the upper and lower bounds of geometry in the LandscapeCell with the upper and lower faces of the WorldCell; if there's geometry in there, queue the new DisplayedLandscapeCell object with references to the raw GL vertex *and* index buffers for drawing, along with those bounds as parameters -- the geometry shader will fix it so only the right stuff is drawn. OK

n.b. change: the LandscapeTile DOES need to know about the GL handles for the vertex and index buffers.  This is because it actually owns them -- the DisplayedLandscapeTiles, which are objects I push directly into the render queue, don't (said buffers are shared between several DisplayedLandscapeTiles if a tile gets rendered several times in the context of different cells).
