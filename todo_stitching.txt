...It turns out that the cell sampling is quite accurate enough for pixels calculated at
the same LoD to line up.  So the below isn't as urgent as I thought it was.

That said, I still feel it's a good idea to make the task queue next.

Original text follows...

...

See those red lines?  Those represent the seams.  Right now the seams are being done wrongly.
Here's what I actually need to do:
 - Implement the task queue.  I am totally going to want the task queue.  It doesn't need to
   be remotely cunning in the first instance, just using coarse grained locks would be fine,
   I can finesse it after I've analysed its performance.  But I really want it right now.
 - Each LandscapeCell should only sample its own cell and not try to calculate the vertices
   along the edges of adjacent cells.  That's doomed to failure.
 - Each LandscapeCell should keep hold of its calculated vertex information.  I'm only going
   to want it anyway in order to detect collisions with the landscape.
 - After I've enqueued each LandscapeCell, I should enqueue a task to calculate its seams with
   the adjacent cells.  This requires a seam cache, which is keyed by a cell octuplet:
   each cell plus the adjacent one along all 3 axes.  (In the first instance, with all geometry
   bound to the y=0 plane, the upper seams will be irrelevant, but that will change.)
 - Each entry in the seam cache contains a separate piece of geometry stitching the cells
   together.
 - As well as the seam cache referencing the seams by the cells they join, each LandscapeCell
   should contain a link to its own seams (the all-+ve ones) and the seams that reference it
   (the ones with non-+ve components).  The task to update the seams should update the links
   in all the relevant cells.
 - Seams between cells at different LoDs should be quite easy.  Only one level of LoD difference
   is supported.  When there's no LoD difference, triangles with an edge onto the first cell
   alternate with triangles with only one vertex onto the first cell.  With the second cell at
   a higher LoD than the first, for each triangle with an edge onto the first cell, the number
   of triangles with a vertex onto the first cell is equal to the subdivision factor.
 - Vertical seams will be slightly more exciting (and require flagging the vertices as present
   or not in each LandscapeCell that I stitch vertically) but I'm sure I'll rise to the
   challenge. :P
 - Debugging: hardwire one top-level cell to a lower LoD than the others and check the seams
   look correct.

Once I've gotten this working for terrain at the highest LoD only, I can start reintroducing
coarser LoD terrain and halfcell terrain and looking for remaining glitches.  (I noticed
seeing whole chunks of terrain projected high into the air sometimes, which I fear might be
a precision problem with the repeated conversion to and from world co-ordinates in the
terrain computation.  Maybe I should convert once to top level co-ordinates and then iterate
downward.)

